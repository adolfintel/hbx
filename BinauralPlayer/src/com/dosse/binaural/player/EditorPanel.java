/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.dosse.binaural.player;

import com.dosse.binaural.BinauralEnvelope;
import com.dosse.binaural.player.utils.FileChooser;
import com.dosse.binaural.player.utils.MessageBox;
import com.dosse.binaural.player.utils.TextClipboard;
import java.awt.Desktop;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.File;
import java.io.FileOutputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.ResourceBundle;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.filechooser.FileFilter;

/**
 * a simple editor. could've used a nice table here but it didn't fit :(
 *
 * @author dosse
 */
public abstract class EditorPanel extends javax.swing.JPanel implements IDeactivable {

    private boolean playTest = false; //set to true to tell the main that the play button was pressed (test required)
    private BinauralEnvelope test; //the test mentioned above
    //LOCALIZATION CRAP
    private static String nothing;
    private static String tooShort;
    private static String saved, savedTitle;
    private static String err, errTitle;
    private static String copy, paste, cut, delete;
    private static URI tutorialURI, uploadURI;
    private static String browserErr;

    static {
        ResourceBundle bundle = ResourceBundle.getBundle("com/dosse/binaural/player/EditorPanel");
        nothing = bundle.getString("EditorPanel.nothing");
        tooShort = bundle.getString("EditorPanel.tooShort");
        saved = bundle.getString("EditorPanel.saved");
        savedTitle = bundle.getString("EditorPanel.savedTitle");
        err = bundle.getString("EditorPanel.err");
        errTitle = bundle.getString("EditorPanel.errTitle");
        copy = bundle.getString("EditorPanel.copy");
        paste = bundle.getString("EditorPanel.paste");
        cut = bundle.getString("EditorPanel.cut");
        delete = bundle.getString("EditorPanel.delete");
        try {
            tutorialURI = new URI(bundle.getString("EditorPanel.tutorialURL"));
        } catch (URISyntaxException ex) {
        }
        try {
            uploadURI = new URI(bundle.getString("EditorPanel.uploadURL"));
        } catch (URISyntaxException ex) {
        }
        browserErr = bundle.getString("EditorPanel.browserErr");
    }
    //the test mentioned above

    public BinauralEnvelope getTestEnvelope() {
        return test;
    }
    //the test mentioned above

    public boolean isTestRequired() {
        return playTest;
    }

    /**
     * Creates new form EditorPanel
     */
    public EditorPanel(BinauralEnvelope be) {
        initComponents();
        if (be == null) {
            return;
        }
        //convert BinauralEnvelope into a string an put it into the TextArea
        String e = be.toString();
        baseF.setValue(be.getBaseF());
        e = e.substring(e.indexOf('\n') + 1, e.length());
        env.setText(e);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        env = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        baseF = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        save = new javax.swing.JLabel();
        play = new javax.swing.JLabel();
        export = new javax.swing.JLabel();
        tutorial = new javax.swing.JLabel();
        share = new javax.swing.JLabel();

        setBackground(Main.darkBackground);

        jLabel1.setFont(Main.bold.deriveFont(11.0f));
        jLabel1.setForeground(Main.text);
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("com/dosse/binaural/player/EditorPanel"); // NOI18N
        jLabel1.setText(bundle.getString("EditorPanel.jLabel1.text")); // NOI18N

        jScrollPane2.setBorder(null);

        env.setBackground(Main.darkButton_normal);
        env.setColumns(15);
        env.setFont(Main.fixedw.deriveFont(13.0f));
        env.setForeground(Main.text);
        env.setRows(5);
        env.setBorder(null);
        env.setCaretColor(new java.awt.Color(204, 204, 204));
        env.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                envMouseReleased(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                envMousePressed(evt);
            }
        });
        jScrollPane2.setViewportView(env);

        jLabel2.setFont(Main.reg.deriveFont(10.0f));
        jLabel2.setForeground(Main.text);
        jLabel2.setText(bundle.getString("EditorPanel.jLabel2.text")); // NOI18N
        jLabel2.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        jLabel3.setFont(Main.reg.deriveFont(12.0f));
        jLabel3.setForeground(Main.text);
        jLabel3.setText(bundle.getString("EditorPanel.jLabel3.text")); // NOI18N

        baseF.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(220.0d), null, null, Double.valueOf(1.0d)));
        baseF.setFocusable(false);

        jLabel4.setFont(Main.bold.deriveFont(11.0f));
        jLabel4.setForeground(Main.text);
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText(bundle.getString("EditorPanel.jLabel4.text")); // NOI18N

        save.setBackground(Main.darkButton_normal);
        save.setFont(Main.reg.deriveFont(14.0f));
        save.setForeground(Main.text);
        save.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        save.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/dosse/binaural/player/save.png"))); // NOI18N
        save.setText(bundle.getString("EditorPanel.save.text")); // NOI18N
        save.setOpaque(true);
        save.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                saveMouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saveMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                saveMousePressed(evt);
            }
        });

        play.setBackground(Main.darkButton_normal);
        play.setFont(Main.reg.deriveFont(14.0f));
        play.setForeground(Main.text);
        play.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        play.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/dosse/binaural/player/play.png"))); // NOI18N
        play.setText(bundle.getString("EditorPanel.play.text")); // NOI18N
        play.setOpaque(true);
        play.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                playMouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                playMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                playMousePressed(evt);
            }
        });

        export.setBackground(Main.darkButton_normal);
        export.setFont(Main.reg.deriveFont(14.0f));
        export.setForeground(Main.text);
        export.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        export.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/dosse/binaural/player/export.png"))); // NOI18N
        export.setText(bundle.getString("EditorPanel.export.text")); // NOI18N
        export.setOpaque(true);
        export.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                exportMouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exportMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                exportMousePressed(evt);
            }
        });

        tutorial.setBackground(Main.darkButton_normal);
        tutorial.setFont(Main.reg.deriveFont(14.0f));
        tutorial.setForeground(Main.text);
        tutorial.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        tutorial.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/dosse/binaural/player/video.png"))); // NOI18N
        tutorial.setText(bundle.getString("EditorPanel.tutorial.text")); // NOI18N
        tutorial.setOpaque(true);
        tutorial.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tutorialMouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tutorialMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tutorialMousePressed(evt);
            }
        });

        share.setBackground(Main.darkButton_normal);
        share.setFont(Main.reg.deriveFont(14.0f));
        share.setForeground(Main.text);
        share.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        share.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/dosse/binaural/player/online.png"))); // NOI18N
        share.setText(bundle.getString("EditorPanel.share.text")); // NOI18N
        share.setOpaque(true);
        share.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                shareMouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                shareMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                shareMousePressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(baseF, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)
                    .addComponent(save, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(play, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(export, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(share, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addComponent(tutorial, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(baseF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(save, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tutorial, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 444, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(play, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(share, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(export, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void saveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveMouseClicked
        //compile the BinauralEnvelope and save it on a file
        if (Main.buttonsDisabled) {
            return;
        }
        try {
            if (env.getText().trim().isEmpty()) {
                throw new Exception(nothing);
            }
            baseF.commitEdit();
            String toCompile = ((Double) baseF.getValue()) + "\n" + env.getText();
            BinauralEnvelope be = BinauralEnvelope.fromString(toCompile);
            if (be.getLength() < 1) {
                throw new Exception(tooShort);
            }
            Object[] o = FileChooser.show(new FileFilter[]{Main.ffX, Main.ffL, Main.ffS}, false);
            File x = (File) o[0];
            FileFilter ff = (FileFilter) o[1];
            if (x == null) {
                return;
            }
            if (ff.equals(Main.ffX)) {
                if (!x.getName().toLowerCase().endsWith(".hbx")) {
                    x = new File(x.getAbsolutePath() + ".hbx");
                }
                PresetCodec.toHBX(be, x);
            }
            if (ff.equals(Main.ffS)) {
                if (!x.getName().toLowerCase().endsWith(".hbs")) {
                    x = new File(x.getAbsolutePath() + ".hbs");
                }
                PresetCodec.toHBS(be, x);
            }
            if (ff.equals(Main.ffL)) {
                if (!x.getName().toLowerCase().endsWith(".hbl")) {
                    x = new File(x.getAbsolutePath() + ".hbl");
                }
                PresetCodec.toHBL(be, x);
            }
            String e = be.toString();
            e = e.substring(e.indexOf('\n') + 1, e.length());
            env.setText(e);
            MessageBox.info(saved, savedTitle);
        } catch (Exception e) {
            MessageBox.error(err + e.getMessage(), errTitle);
        }
    }//GEN-LAST:event_saveMouseClicked
    //graphics sfuff
    private void saveMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveMousePressed
        save.setBackground(Main.darkButton_pressed);
    }//GEN-LAST:event_saveMousePressed
//graphics sfuff
    private void saveMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveMouseReleased
        save.setBackground(Main.darkButton_normal);
    }//GEN-LAST:event_saveMouseReleased
//graphics sfuff
    private void playMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playMouseReleased
        play.setBackground(Main.darkButton_normal);
    }//GEN-LAST:event_playMouseReleased
//graphics sfuff
    private void playMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playMousePressed
        play.setBackground(Main.darkButton_pressed);
    }//GEN-LAST:event_playMousePressed

    private void playMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playMouseClicked
        //compile and send to player
        if (Main.buttonsDisabled) {
            return;
        }
        try {
            if (env.getText().trim().isEmpty()) {
                throw new Exception(nothing);
            }
            baseF.commitEdit();
            String toCompile = ((Double) baseF.getValue()) + "\n" + env.getText();
            test = BinauralEnvelope.fromString(toCompile);
            if (test.getLength() < 1) {
                throw new Exception(tooShort);
            }
            playTest = true;
            deactivate();
        } catch (Exception ex) {
            MessageBox.error(err + ex.getMessage(), errTitle);
        }
    }//GEN-LAST:event_playMouseClicked
//graphics sfuff
    private void exportMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exportMouseReleased
        export.setBackground(Main.darkButton_normal);
    }//GEN-LAST:event_exportMouseReleased

    private void exportMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exportMouseClicked
        //compile and save to wav file
        if (Main.buttonsDisabled) {
            return;
        }
        try {
            if (env.getText().trim().isEmpty()) {
                throw new Exception(nothing);
            }
            baseF.commitEdit();
            String toCompile = ((Double) baseF.getValue()) + "\n" + env.getText();
            BinauralEnvelope be = BinauralEnvelope.fromString(toCompile);
            if (be.getLength() < 1) {
                throw new Exception(tooShort);
            }
            File x = (File) FileChooser.show(new FileFilter[]{new FileFilter() {
                    @Override
                    public boolean accept(File f) {
                        if (f.isDirectory() || f.getName().toLowerCase().endsWith(".wav")) {
                            return true;
                        } else {
                            return false;
                        }
                    }

                    @Override
                    public String getDescription() {
                        return ".wav File";
                    }
                }}, false)[0];
            if (x == null) {
                return;
            }
            if (!x.getName().toLowerCase().endsWith(".wav")) {
                x = new File(x.getAbsolutePath() + ".wav");
            }
            RenderWindow.render(be, new FileOutputStream(x));
        } catch (Exception e) {
            MessageBox.error(err + e.getMessage(), errTitle);
        }
    }//GEN-LAST:event_exportMouseClicked
//graphics sfuff
    private void exportMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exportMousePressed
        export.setBackground(Main.darkButton_pressed);
    }//GEN-LAST:event_exportMousePressed

    private void envMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_envMousePressed
        if (evt.isPopupTrigger()) {
            //context menu
            new JPopupMenu() {
                {
                    JMenuItem cp = new JMenuItem(copy);
                    cp.addMouseListener(new MouseListener() {
                        @Override
                        public void mouseClicked(MouseEvent e) {
                        }

                        @Override
                        public void mousePressed(MouseEvent e) {
                        }

                        @Override
                        public void mouseReleased(MouseEvent e) {
                            TextClipboard.set(env.getSelectedText());
                        }

                        @Override
                        public void mouseEntered(MouseEvent e) {
                        }

                        @Override
                        public void mouseExited(MouseEvent e) {
                        }
                    });
                    JMenuItem p = new JMenuItem(paste);
                    p.addMouseListener(new MouseListener() {
                        @Override
                        public void mouseClicked(MouseEvent e) {
                        }

                        @Override
                        public void mousePressed(MouseEvent e) {
                        }

                        @Override
                        public void mouseReleased(MouseEvent e) {
                            env.setText(env.getText().substring(0, env.getSelectionStart()) + TextClipboard.get() + env.getText().substring(env.getSelectionEnd(), env.getText().length()));
                        }

                        @Override
                        public void mouseEntered(MouseEvent e) {
                        }

                        @Override
                        public void mouseExited(MouseEvent e) {
                        }
                    });
                    JMenuItem cu = new JMenuItem(cut);
                    cu.addMouseListener(new MouseListener() {
                        @Override
                        public void mouseClicked(MouseEvent e) {
                        }

                        @Override
                        public void mousePressed(MouseEvent e) {
                        }

                        @Override
                        public void mouseReleased(MouseEvent e) {
                            TextClipboard.set(env.getSelectedText());
                            env.setText(env.getText().substring(0, env.getSelectionStart()) + env.getText().substring(env.getSelectionEnd(), env.getText().length()));
                        }

                        @Override
                        public void mouseEntered(MouseEvent e) {
                        }

                        @Override
                        public void mouseExited(MouseEvent e) {
                        }
                    });
                    JMenuItem del = new JMenuItem(delete);
                    del.addMouseListener(new MouseListener() {
                        @Override
                        public void mouseClicked(MouseEvent e) {
                        }

                        @Override
                        public void mousePressed(MouseEvent e) {
                        }

                        @Override
                        public void mouseReleased(MouseEvent e) {
                            env.setText(env.getText().substring(0, env.getSelectionStart()) + env.getText().substring(env.getSelectionEnd(), env.getText().length()));
                        }

                        @Override
                        public void mouseEntered(MouseEvent e) {
                        }

                        @Override
                        public void mouseExited(MouseEvent e) {
                        }
                    });

                    if (env.getSelectedText() == null) {
                        cu.setEnabled(false);
                        cp.setEnabled(false);
                        del.setEnabled(false);
                    }
                    if (TextClipboard.get() == null) {
                        p.setEnabled(false);
                    }
                    add(cu);
                    add(cp);
                    add(p);
                    add(del);
                }
            }.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_envMousePressed

    private void envMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_envMouseReleased
        envMousePressed(evt); //needed for cross platform functionality (thanks mac, we all love you, you piece of dog shit :))
    }//GEN-LAST:event_envMouseReleased

    private void tutorialMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tutorialMouseReleased
        tutorial.setBackground(Main.darkButton_normal);
    }//GEN-LAST:event_tutorialMouseReleased

    private void tutorialMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tutorialMouseClicked
        try {
            Desktop.getDesktop().browse(tutorialURI);
        } catch (Throwable t) {
            MessageBox.error(browserErr + "<br>" + tutorialURI.toString(), errTitle);
        }
    }//GEN-LAST:event_tutorialMouseClicked

    private void tutorialMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tutorialMousePressed
        tutorial.setBackground(Main.darkButton_pressed);
    }//GEN-LAST:event_tutorialMousePressed

    private void shareMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_shareMouseReleased
        try {
            Desktop.getDesktop().browse(uploadURI);
        } catch (Throwable t) {
            MessageBox.error(browserErr + "<br>" + uploadURI.toString(), errTitle);
        }
    }//GEN-LAST:event_shareMouseReleased

    private void shareMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_shareMouseClicked
        share.setBackground(Main.darkButton_normal);
    }//GEN-LAST:event_shareMouseClicked

    private void shareMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_shareMousePressed
        share.setBackground(Main.darkButton_pressed);
    }//GEN-LAST:event_shareMousePressed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner baseF;
    private javax.swing.JTextArea env;
    private javax.swing.JLabel export;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel play;
    private javax.swing.JLabel save;
    private javax.swing.JLabel share;
    private javax.swing.JLabel tutorial;
    // End of variables declaration//GEN-END:variables
    private boolean inactive = false;

    @Override
    public boolean isDeactivated() {
        return inactive;
    }

    @Override
    public void deactivate() {
        if (inactive) {
            return;
        }
        inactive = true;
        onDeactivation();
        setVisible(false);
    }
}
